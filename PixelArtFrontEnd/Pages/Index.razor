@page "/"

@inject PixelArtFrontEnd.Services.Interfaces.IFrontEndHelperService frontEndHelper
@inject PixelArtFrontEnd.Services.Interfaces.INeopixelControllerService neopixelService
@inject PixelArtFrontEnd.Services.Interfaces.IPatternService patternService

@using PixelArtFrontEnd.Models
@using System;
@using System.Text.Json
@using System.Threading;

<select class="form-control selectpicker w-25" @bind="selectedPattern.PatternUUID" @bind:event="oninput" @onchange="GetPatternDetailsByUUIDAsync">
    <option>--select--</option>
    @foreach (var item in availablePatterns)
    {
        <option value="@item.PatternUUID">@item.PatternName</option>
    }
</select>
<br/>
@for (var i = 0; i < 16; ++i)
{
    <div class="btn-group" role="group" aria-label="First group">
        @for (var j = 0; j < 16; ++j)
        {
            <button type="button" style="background-color:@frontEndHelper.GetButtonColor(currentPatternSequenceDetails, i, j)" class="btn btn-secondary mr-2 mb-2">&#8203;</button>
        }
    </div>
    <br />
}
<input type="button" @onclick="@StartPattern" value="Start Pattern"/>
<input type="button" @onclick="@StopSending" value="Stop Sending" />
@code {

   
    PixelPatternDetails currentPatternSequenceDetails = new PixelPatternDetails();
    IEnumerable<PixelPatternDetails> patternDetails = new List<PixelPatternDetails>();
    IEnumerable<AvailablePatterns> availablePatterns = new List<AvailablePatterns>();
    AvailablePatterns selectedPattern = new AvailablePatterns();
    bool isSending = false;
    System.Threading.Thread sender;



    protected override async Task OnInitializedAsync()
    {
        availablePatterns = await patternService.GetAvailablePatternsAsync();
    }

    private async Task GetPatternDetailsByUUIDAsync()
    {
        patternDetails = await patternService.GetPatternDetailsByUUIDAsync(selectedPattern.PatternUUID);
        currentPatternSequenceDetails = patternDetails.Where(i => i.PatternSequenceNumber == 1).Single();
        await InvokeAsync(() => StateHasChanged());
    }

    private bool StartPattern()
    {
        if (isSending)
        {
            return false;
        }
        isSending = true;
        sender = new System.Threading.Thread(SendData);
        sender.IsBackground = true;
        sender.Start();
        return true;
    }

    private void StopSending()
    {
        isSending = false;
        if (sender.Join(200) == false)
        {
            sender.Join();
        }
        sender = null;
    }

    private void SendData()
    {
        while (isSending)
        {
            foreach (var i in patternDetails.Select(i => i.PatternSequenceNumber))
            {
                neopixelService.SendNeopixelUpdate(currentPatternSequenceDetails.PatternDetails).Wait();
                currentPatternSequenceDetails = patternDetails.Where(j => j.PatternSequenceNumber == i).Single();
                Thread.Sleep(1000);
            }
        }
    }  
}
