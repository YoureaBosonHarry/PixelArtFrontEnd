@page "/"

@inject PixelArtFrontEnd.Services.Interfaces.IFrontEndHelperService frontEndHelper
@inject PixelArtFrontEnd.Services.Interfaces.IPatternService patternService

@using PixelArtFrontEnd.Models
@using System;
@using System.Text.Json
@using System.Threading;
<div class="row g-3">
    <div class="col">
        <select class="form-control selectpicker w-auto" @bind="selectedPattern.PatternUUID" @bind:event="oninput" @onchange="GetPatternDetailsByUUIDAsync">
            <option>--select--</option>
            @foreach (var item in availablePatterns)
            {
                <option value="@item.PatternUUID">@item.PatternName</option>
            }
        </select>
        @if (selectedPattern.PatternUUID != Guid.Empty)
        {
            <form>
                <div class="form-group">
                    <label for="patternName">Pattern Name</label>
                    <input type="text" class="form-control" id="patternName" @bind-value="selectedPattern.PatternName" aria-describedby="patternHelp" placeholder="Enter Name">
                    <small id="patternHelp" class="form-text text-muted">Enter pattern name to create/update.</small>
                </div>
                <div class="form-group">
                    <label for="sequenceSelect">Select Sequence Number</label>
                    <select class="form-control" id="sequenceSelect" @bind="currentPatternSequenceDetails.PatternSequenceNumber">
                        @foreach (var item in patternDetails)
                        {
                            <option value="@item.PatternSequenceNumber">@item.PatternSequenceNumber</option>
                        }
                    </select>
                </div>
            </form>
        }
    </div>
    <div class="col">
        @for (var i = 0; i < 16; ++i)
        {
            <div class="btn-group" role="group" aria-label="First group">
                @for (var j = 0; j < 16; ++j)
                {
                    <button type="button" style="background-color:@frontEndHelper.GetButtonColor(currentPatternSequenceDetails, i, j)" class="btn btn-secondary mr-2 mb-2">&#8203;</button>
                }
            </div>
            <br />
        }
    </div>
</div>
@code {
    PixelPatternDetails currentPatternSequenceDetails = new PixelPatternDetails();
    IEnumerable<PixelPatternDetails> patternDetails = new List<PixelPatternDetails>();
    IEnumerable<PatternList> availablePatterns = new List<PatternList>();
    PatternList selectedPattern = new PatternList();



    protected override async Task OnInitializedAsync()
    {
        //availablePatterns = await patternService.GetPatternListAsync();
    }

    private void GetPatternDetailsByUUIDAsync()
    {
        
    }

    private void StartPattern()
    {

    }

    private void StopSending()
    {
        
    }  
}
